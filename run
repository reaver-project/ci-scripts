#!/usr/bin/env python

import argparse
import package
import subprocess
import teamcity
import time
import sys
import os

parser = argparse.ArgumentParser(description = 'Reaver Project CI scripts: configuration matrix runner')
parser.add_argument('package', help = 'Package to use as set of arguments.')
parser.add_argument('command', help = 'Command to run. Substitutes {} for the version.')

parser.add_argument('-t', '--teamcity', required = 'true', help = 'TeamCity server to use.')
parser.add_argument('-u', '--user', required = 'true', help = 'TeamCity user to login as.')
parser.add_argument('-p', '--password', required = 'true', help = 'Password for the selected user.')
parser.add_argument('-i', '--id', required = 'true', help = 'ID of the build configuration to trigger.')

parser.add_argument('-c', '--commitish', help = 'The value for "commitish" argument of the invoked job.')
parser.add_argument('-s', '--style', default = 'solid', help = 'Style of configuration argument passing. Currently supported: "solid".')

group = parser.add_mutually_exclusive_group(required = False)
group.add_argument('-b', '--built-only', action = 'store_true', help = 'Only run for built versions.')
group.add_argument('-v', '--not-built-only', action = 'store_true', help = 'Only run for not built versions.')
group.add_argument('-V', '--not-built-built-bases', action = 'store_true', help = 'Only run for not built versions that have their base versions built.')

parser.add_argument('version', nargs = '?')

args = parser.parse_args()

package = package.Package(args.package)
versions = package.combined_versions(built_bases = args.not_built_built_bases)
if args.built_only or args.not_built_only:
    versions = [ version for version in versions if (version in package.built_versions()) == args.built_only ]

if args.style == 'solid':
    pass

else:
    print 'Style %s not supported.' % args.style
    exit(1)

session = teamcity.Session(args.teamcity + '/httpAuth/app/rest', args.user, args.password)

if 'version' in args and args.version is not None:
    command = args.command.replace('{}', args.version)
    session.add_tag({ 'buildType': args.id, 'number': os.environ['BUILD_NUMBER'] }, args.version)
    exit(subprocess.call(command, shell = True))
else:
    responses = {}

    session.add_tag({ 'buildType': args.id, 'number': os.environ['BUILD_NUMBER'] }, "trigger")

    change_id = session.get_change_id({ 'buildType': args.id, 'number': os.environ['BUILD_NUMBER'] })
    print 'Internal change id to use: %d.' % change_id

    for version in versions:
        responses[version] = session.trigger(args.id,
            properties = { 'version': version },
            change = change_id)

        print 'Started build for %s: %s.' % (version, responses[version]['webUrl'])
        sys.stdout.flush()
