#!/usr/bin/env python

import argparse
import package
import subprocess
import teamcity
import time

parser = argparse.ArgumentParser(description = 'Reaver Project CI scripts: configuration matrix runner')
parser.add_argument('package', help = 'Package to use as set of arguments.')
parser.add_argument('command', help = 'Command to run and to append configuration options to.')

parser.add_argument('-t', '--teamcity', required = 'true', help = 'TeamCity server to use.')
parser.add_argument('-u', '--user', required = 'true', help = 'TeamCity user to login as.')
parser.add_argument('-p', '--password', required = 'true', help = 'Password for the selected user.')

parser.add_argument('-c', '--commitish', help = 'The value for "commitish" argument of the invoked job.')
parser.add_argument('-s', '--style', default = 'solid', help = 'Style of configuration argument passing. Currently supported: "solid".')

group = parser.add_mutually_exclusive_group(required = False)
group.add_argument('-b', '--built-only', action = 'store_true', help = 'Only run for built versions.')
group.add_argument('-v', '--not-built-only', action = 'store_true', help = 'Only run for not built versions.')

parser.add_argument('version', nargs = '?')

args = parser.parse_args()

package = package.Package(args.package)
versions = package.combined_versions()
if args.built_only or args.not_built_only:
    versions = [ version for version in versions if (version in package.built_versions()) == args.built_only ]

if args.style == 'solid':
    pass

else:
    print 'Style %s not supported.' % args.style
    exit(1)

session = teamcity.Session(args.teamcity + '/httpAuth/app/rest', args.user, args.password)

if 'version' in args and args.version is not None:
    command = args.command + ' ' + args.version
    subprocess.call(command, shell = True)
else:
    responses = {}
    for version in versions:
        responses[version] = session.trigger('Random_Random', { 'version': version })

    for version, build in responses.iteritems():
        status = session.status(build['id'])
        while not hasattr(status, 'status'):
            print status
            time.sleep(1)
            status = session.status(build['id'])

        print '##teamcity[testStarted name=\'%s\']' % version
        if status['status'] != 'SUCCESS':
            print 'See details: %s.' % build['webUrl']
            print '##teamcity[testFailed name=\'%s\' message=\'Downstream build failed.\']' % version
        print '##teamcity[testFinished name=\'%s\']' % version

